How to create a component:
1. ng g c <component_name>

Binding:
1. interpolation: we can use {{<var>}} to display our data.
2. Property Binding: we use [] "box" syntax.
3. Event Binding: use () "banana" syntax for event binding.

Built-in Directices:
1. *ngIf :  this is a structured directive which removes the element from DOM.
2. *ngFor: To bind the array object we can use ngFor.
3. ngSwitch: Similar to switch case
4. ngClass: To provide the classes at runtime based on some action.

Component Interaction:

What: The way to pass data to and from between different component.

How:
1. HTML
    a. Input() : To Pass data from parent to child component, we need to use @Input() decorator.
    b. Output(): To receive data from child to parent.
2. Typscript:
    a. ViewChild() :  This will be used when we want direct control over our child component.
    b. ViewChildren(): To access multiple compoents of same type.
3. Service :



Component Lifecycle:
1. constructor: no code to be wrtitte here, only used for DI.
2. ngOnInit : First event to be called after constructor, best place to write 
some code to load data from backend.
3. ngOnChanges:  works only with classes having input properties, is useful in 
case we want to log previous and current value for our input properties.
4. ngDoCheck: This event is called after init and after any event is triggered.
Very useful for scenarios like auot complete. Should not be implemented with OnChnages.
5. ngAfterViewInit: If in case we want to access poperties or functionsof ViewChildrent component
right after view is initalised, this is the evevnt.
6. ngOnDestroy:  This is the last event in lifecycle, use this to freup resources,
also to handle some scenarios where want to show user some message when user is moving
away fro one component to another.